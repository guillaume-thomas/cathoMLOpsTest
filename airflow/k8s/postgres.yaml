kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: postgres-airflow
spec:
  replicas: 1
  selector:
    matchLabels:
      name: postgres-airflow
  template:
    metadata:
      labels:
        name: postgres-airflow
    spec:
      restartPolicy: Always
      containers:
        - name: postgres
          image: postgres
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432
              protocol: TCP
          volumeMounts:
            - name: dbvol
              mountPath: /var/lib/postgresql/data/pgdata
              subPath: pgdata
          env:
            - name: POSTGRES_USER
              value: "ktoairflow"
            - name: POSTGRES_PASSWORD
              value: "ktomlops"
            - name: POSTGRES_DB
              value: "airflow"
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
            - name: POD_IP
              valueFrom: { fieldRef: { fieldPath: status.podIP } }
          livenessProbe:
            initialDelaySeconds: 60
            timeoutSeconds: 5
            failureThreshold: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready --host $POD_IP ||  if [[ $(psql -qtAc --host $POD_IP 'SELECT pg_is_in_recovery') != "f" ]]; then  exit 0 else; exit 1; fi
          readinessProbe:
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready --host $POD_IP
          resources:
            requests:
              memory: 1000Mi
              cpu: 1000m
      volumes:
        - name: dbvol
          emptyDir: {}
  serviceName: postgres-airflow
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-airflow
spec:
  clusterIP: None
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    name: postgres-airflow